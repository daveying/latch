name: CMake

on:
  push:
    branches: [ main, viewer ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-18.04]
        build_type: [Debug, Release]

    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build-{build_type}' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build-${{matrix.build_type}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build-${{matrix.build_type}} --config ${{matrix.build_type}}

    - name: Test
      working-directory: ${{github.workspace}}/build-${{matrix.build_type}}
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.build_type}} && ./tests/component-factory/component-factory-test
